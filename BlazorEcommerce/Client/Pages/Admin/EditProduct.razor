@page "/admin/product"
@page "/admin/product/{ProductId:int}"
@using Microsoft.VisualBasic
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@if (loading)
{
    <span>@message</span>
}
else
{
    @if (product.Editing)
    {
        <h3>Edit "@product.Title"</h3>
    }
    else if (product.IsNew)
    {
        <h3>Create a new Product</h3>
    }

    <EditForm Model="product" OnInvalidSubmit="AddOrUpdateProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-0">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="product.Title" class="form-control"></InputText>
        </div>
        <div class="mb-1">
            <label for="title">Image Url</label>
            <InputText id="imageUrl" @bind-Value="product.ImageUrl" class="form-control"></InputText>
        </div>
        <div class="mb-3" style="display: flex; flex-wrap: wrap; flex-direction: row; justify-content: center">
            @if (!string.IsNullOrEmpty(product.ImageUrl))
            {
                <img src="@product.ImageUrl" />
            }
            else
            {
                foreach (var image in product.Images)
                {
                    <MudCard Class="ma-2">
                        <MudCardContent>
                            <MudImage Src="@image.Data"/>
                        </MudCardContent>
                        <MudCardActions Style="justify-content: center">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Error"
                                       OnClick="(() => RemoveImage(image.Id))">Remove</MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            }
        </div>
        <div class="mb-1">
            <label for="images">Image(s)</label>
            <InputFile id="images" multiple OnChange="OnFileChange" class="form-control"></InputFile>
        </div>
        <div class="mb-0">
            <label for="title">Description</label>
            <InputTextArea id="description" @bind-Value="product.Description" class="form-control" style="height: 150px"></InputTextArea>
        </div>
        <hr />
        <div class="header">
            <div class="col">Product Type / Variant</div>
            <div class="col">Price</div>
            <div class="col">Original Price</div>
            <div class="col">Visible</div>
            <div class="col"></div>
        </div>
        @foreach (var variant in product.Variants)
        {
            <div class="row">
                <div class="col">
                    <InputSelect disabled="@variant.Deleted" @bind-Value="variant.ProductTypeId" class="form-control">
                        @foreach (var productType in ProductTypeService.ProductTypes)
                        {
                            <option value="@productType.Id.ToString()">@productType.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col">
                    <InputNumber disabled="@variant.Deleted" @bind-Value="variant.Price" class="form-control"></InputNumber>
                </div>
                <div class="col">
                    <InputNumber disabled="@variant.Deleted" @bind-Value="variant.OriginalPrice" class="form-control"></InputNumber>
                </div>
                <div class="col col-visible">
                    <InputCheckbox disabled="@variant.Deleted" @bind-Value="variant.Visible" style="transform: scale(1.5, 1.5)"></InputCheckbox>
                </div>
                <div class="col">
                    <div class="col">
                        <button type="button" disabled="@variant.Deleted" @onclick="@(() => RemoveVariant(variant.ProductTypeId))" class="form-control">
                            <i class="oi oi-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        }
        <button type="button" class="btn btn-primary" @onclick="AddVariant">
            <i class="oi oi-plus" /> Add Variant
        </button>
        <hr />
        <div class="mb-0">
            <label for="category">Category</label>
            <InputSelect id="category" @bind-Value="product.CategoryId" class="form-control">
                @foreach (var category in CategoryService.AdminCategories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>
        <hr />
        <div class="form-check">
            <InputCheckbox id="featured" @bind-Value="product.Featured" class="form-check-input"></InputCheckbox>
            <label for="featured" class="form-check-label">Featured</label>
        </div>
        <div class="form-check">
            <InputCheckbox id="visible" @bind-Value="product.Visible" class="form-check-input"></InputCheckbox>
            <label for="visible" class="form-check-label">Visible</label>
        </div>
        <hr />
        <button type="submit" class="btn btn-primary float-end" @onclick="AddOrUpdateProduct">@btnTetxt</button>
        <ValidationSummary />
    </EditForm>
    @if (!product.IsNew)
    {
        <button type="button" class="btn btn-danger float-start" @onclick="DeleteProduct">
            Delete Product
        </button>
    }
}

@code {

    [Parameter]
    public int ProductId { get; set; }

    Product product = new Product();

    bool loading = true;

    string btnTetxt = "";
    string message = "Loading";

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ProductId == 0)
        {
            product = new Product { IsNew = true };
            btnTetxt = "Create Product";
        }
        else
        {
            Product dbProduct = (await ProductService.GetProduct(ProductId)).Data;
            if (dbProduct == null)
            {
                message = $"Product with Id {ProductId} does not exist!";
                return;
            }
            product = dbProduct;
            product.Editing = true;
            btnTetxt = "Update Product";
        }
        loading = false;
    }

    void RemoveVariant(int productTypeId)
    {
        var variant = product.Variants.Find(v => v.ProductTypeId == productTypeId);

        if (variant == null) return;

        if (variant.IsNew) product.Variants.Remove(variant);
        else variant.Deleted = true;
    }

    void AddVariant()
    {
        product.Variants.Add(new ProductVariant
            {
                IsNew = true,
                ProductId = product.Id
            });
    }

    async void AddOrUpdateProduct()
    {
        if (product.IsNew)
        {
            var result = await ProductService.CreateProduct(product);
            Console.WriteLine(result.Id);
            NavigationManager.NavigateTo($"admin/product/{result.Id}");
        }
        else
        {
            product.IsNew = false;
            product = await ProductService.UpdateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{product.Id}", true);
        }

    }

    async void DeleteProduct()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm",
            $"Do you really want to delete '{product.Title}'?");
        if (confirmed)
        {
            await ProductService.DeleteProduct(product);
            NavigationManager.NavigateTo("admin/products");
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs eventArgs)
    {
        var format = "image/png";
        foreach (var image in eventArgs.GetMultipleFiles(5))
        {
            var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            product.Images.Add(new Image { Data = imageData });
        }
    }

    void RemoveImage(int imageId)
    {
        var image = product.Images.FirstOrDefault(i => i.Id == imageId);

        if (image != null)
        {
            product.Images.Remove(image);
        }
    }

}